############################全局块
#守护进程,不要在生成环境使用
daemon [on|off];
master_process [on|off];
#调试断点
debug_points stop|abort;
#日志路径和日志级别
error_log file [debug|info|notice|warn|error|crit];
#包含的配置文件,可以减少主配置文件
include vhosts/*.conf;
#锁文件
lock_file /var/log/lock_file;
#进程ID存储文件
pid /var/log/nginx.pid;
#指定OpenSSL使用的引擎
ssl_engine engine;
#允许减少获取时间
timer_resolution 100ms;
#进程运行用户,默认为nobody
user user [group]
#最大进程数,推荐为CPU核数
worker_processes 4;
#每个进程核心文件大小的最大值
worker_rlimit_core 10k;
#每个进程可以打开文件大小的最大值
worker_rlimit_nofile 10k;
#对呼叫过程的真实用户ID可能排队的信号数量的限制
worker_rlimit_sigpending 10;
############################events块
events {
    #对多个Nginx进程接收连接进行序列化,防止多个进程对连接的争抢,默认是on
    accept_mutex [on|off];
    #报告在等待被接受的新连接的数量
    multi_accept [on|off];
    #指定使用的网络IO模型
    use [select|poll|kqueue|epoll|rtsig|/dev/poll|eventport];
    #每一个worker同时开启的最大连接数,不能超过系统支持打开的最大文件数,也不能超过单个进程支持打开的最大文件数
    worker_connections 1024;
}
############################http块,此处内容较多,随时更新,
http {
    #日志格式及access日志路径,在http块中定义了一个名为main的日志格式,所有站点的日志都会按这个格式记录
    log_format main '$remote_addr - $remote_user [$time_local]  $status '
     '"$request" $body_bytes_sent "$http_referer" '
     '"$http_user_agent" "$http_x_forwarded_for"';
    access_log logs/access.log main;
    #Docker DNS
    resolver 127.0.0.1 valid=30s;
    #Docker compose
    #resolver 127.0.0.11 valid=30s;
    #k8s
    #resolver kube-dns.kube-system.svc.cluster.local valid=30s;
    #负载均衡集群信息,weight为权重,weight越高,权重越大
    #负载均衡算法:轮询(默认),权重(weight),ip_hash,hash,fair
    #server es-node1:9200 backup #热备
    #server es-node1:9200 down #不参与负载均衡
    upstream es-cluster {
        #每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session的问题
        ip_hash;
        #按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,后端服务器为缓存时比较有效
        hash $request_uri;
        #按后端服务器的响应时间来分配请求,响应时间短的优先分配,使用这个算法需要安装nginx-upstream-fair这个库
        fair;
        server es-master:9200 weight=1;
        server es-node1:9200 weight=1;
        #长连接的连接数
        keepalive 1000;
    }
    #http层面的keep-alive超时时间
    keepalive_timeout 60;
    #该指令设置与upstream服务器的连接超时时间,这个超时建议不超过75秒。
    proxy_connect_timeout 60;
    #该指令设置应用服务器的响应超时时间,默认60秒。
    proxy_read_timeout 60；
    #设置了发送请求给upstream服务器的超时时间
    proxy_send_timeout 60;
    #跨域设置
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET,POST,PUT,DELETE,OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' '*' always;
    add_header 'Access-Control-Max-Age' 1728000 always;
    add_header Referrer-Policy 'origin';
    add_header 'Vary' "Origin";
    #Set headers
    proxy_set_header Host                    $host:$server_port;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Forwarded-Proto       $scheme;
    proxy_set_header X-Forwarded-For         $proxy_add_x_forwarded_for;
    proxy_set_header X-Appengine-Remote-Addr $remote_addr;
    #Fastcgu config
    fastcgi_buffer_size          128k;
    fastcgi_buffers              8 128k;
    fastcgi_busy_buffers_size    128k;
    fastcgi_temp_file_write_size 128k;
    #Gzip config
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 8;
    gzip_types application/javascript text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_disable "MSIE [1-6]\.";
    gzip_vary on;
    gzip_static on;
    #Security settings
    more_set_headers 'Server: oneserver';
    more_set_headers 'Strict-Transport-Security: max-age=16070400; includeSubdomains';
    more_set_headers 'X-Content-Type-Options: nosniff';
    more_set_headers 'X-Frame-Options: SAMEORIGIN';
    more_set_headers 'X-Xss-Protection: 1; mode=block';
    more_set_headers "Content-Security-Policy: default-src * 'self';font-src * data:;connect-src *;img-src * 'self' data:;style-src * 'unsafe-inline';media-src *;script-src * 'self' 'unsafe-inline' 'unsafe-eval'";
    more_set_headers 'Cache-Control: no-store';
    more_set_headers 'Pragma: no-cache';
    #配置虚拟服务器
    server {
        #监听端口
        #http3 nginx version 1.25.4
        #listen 443 quic reuseport;
        #listen 80;
        listen 443 ssl;
        #服务器域名,推荐使用本机IP
        server_name 0.0.0.0;
        #限制用户上传文件大小，默认1M
        client_max_body_size 10M;
        #SSL verify
        ssl_prefer_server_ciphers    on;
        ssl_protocols                TLSv1.2;
        #http3
        #ssl_protocols                TLSv1.3;
        #add_header Alt-Svc 'h3=":443"; ma=86400';
        ssl_certificate      /usr/local/nginx/conf/server.crt;
        ssl_certificate_key  /usr/local/nginx/conf/server.key;
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        #客户端双向认证 optional
        #ssl_verify_client on;
        #ssl_client_certificate      /usr/local/nginx/conf/client.crt;

        #跨域 OPTIONS 直接200
        if ($request_method = 'OPTIONS') {
           return 200;
        }
        #反向代理
        location / {
            try_files $uri $uri/ /index.html?/$request_uri;
            #反向代理,负载均衡时,应与upstream的值对应
            proxy_pass http://es-cluster;
            #禁止的IP
            deny 192.168.0.1;
            #放行的IP
            allow 192.168.0.2;
            #HTML目录
            root   /home/yasin/docs;
            index  swagger.html;
            #反向代理防止服务挂掉而Nginx启动失败
            #set $upstream http://yasin:8888;
            #proxy_pass $upstream;
            #ssl_verify_client optional
            #if ($ssl_client_verify != SUCCESS) {
            #    return 401;
            #}
        }
        #nginx状态查询
        location /nginx-status {
            stub_status on;
            #不在access_log记录该项访问
            access_log off;
        }
    }
}
############################超时设置,可以根据需求选择作用域,默认单位是:s
#客户端连接保持会话超时时间,超过这个时间,服务器断开这个链接
keepalive_timeout 60;
#设置请求头的超时时间,可以设置低点。
#如果超过这个时间没有发送任何数据,nginx将返回request time out的错误
client_header_timeout 15;
#设置请求体的超时时间,可以设置低点
#如果超过这个时间没有发送任何数据,nginx将返回request time out的错误
client_body_timeout 15;
#响应客户端超时时间
#如果超过这个时间,客户端没有任何活动,nginx关闭连接
send_timeout 15;
#上传文件大小限制
client_max_body_size 10m;
#也是防止网络阻塞,不过要包涵在keepalive参数才有效
tcp_nodelay on;
#客户端请求头部的缓冲区大小,这个可以根据你的系统分页大小来设置
#一般一个请求头的大小不会超过1k,不过由于一般系统分页都要大于1k
client_header_buffer_size 2k;
#这个将为打开文件指定缓存,默认是没有启用的
#max指定缓存数量,建议和打开文件数一致,inactive是指经过多长时间文件没被请求后删除缓存
open_file_cache max=102400 inactive=20s;
#这个是指多长时间检查一次缓存的有效信息
open_file_cache_valid 30s;
#告诉nginx关闭不响应的客户端连接,这将会释放那个客户端所占有的内存空间
reset_timedout_connection on;